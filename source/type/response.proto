import "type.proto";

package pbnavitia;

message PTReferential {
    repeated ValidityPattern validity_patterns = 20;
    repeated Line lines = 1;
    repeated JourneyPattern journey_patterns = 2;
    repeated VehicleJourney vehicle_journeys = 3;
    repeated StopPoint stop_points = 4;
    repeated StopArea stop_areas = 5;
    repeated Network networks = 7;
    repeated PhysicalMode physical_modes = 8;
    repeated CommercialMode commercial_modes = 9;
    repeated Connection connections = 11;
    repeated JourneyPatternPoint journey_pattern_points = 12;
    repeated Company companies = 15;
    repeated Route routes = 23;
}

message PathItem {
    optional string name = 1;
    optional double length = 2;
    optional int32 direction = 3;
    optional double duration = 4;
}

enum StreetNetworkMode {
    Walking = 0;
    Bike = 1;
    Car = 3;
    Bss = 4;
}

message StreetNetwork {
    optional double length = 1;
    optional double duration = 2;
    optional StreetNetworkMode mode = 3;
    repeated PathItem path_items = 4;
    repeated GeographicalCoord coordinates = 5;
}

enum SectionType {
    PUBLIC_TRANSPORT = 1;
    STREET_NETWORK = 2;
    WAITING = 3;
    TRANSFER = 4;
    boarding = 6;
    landing = 7;
    BSS_RENT = 8;
    BSS_PUT_BACK = 9;
    CROW_FLY = 10;
    PARK = 11;
    LEAVE_PARKING = 12;
}

enum TransferType {
    walking = 1;
    guaranteed = 2;
    stay_in = 3;

}


message PtDisplayInfo {
    optional string network = 1;
    optional string code = 2;
    optional string headsign = 3;
    optional string direction = 4;
    optional string color = 5;
    optional string commercial_mode = 6;
    optional string physical_mode = 7;
    optional string description = 8;
    optional Uris uris = 9;
    optional VehicleJourneyType vehicle_journey_type = 10;
    optional hasEquipments has_equipments = 11;
    optional string name = 12;
    repeated Message messages = 13;
    repeated Disruption disruptions = 14;
}

message Uris {
    optional string company = 1;
    optional string vehicle_journey = 2;
    optional string line = 3;
    optional string route = 4;
    optional string commercial_mode = 5;
    optional string physical_mode = 6;
    optional string network = 7;
    optional string note = 8;
    optional string journey_pattern = 9;
}

message Cost {
    optional double value = 1;
    optional string currency = 2;
}

message Ticket {
    optional string id = 1;
    optional string name = 2;
    optional Cost cost = 3;
    repeated string section_id = 4;
    optional bool found = 5;
    optional string comment = 6;
}

message Fare {
    optional Cost total = 1;
    repeated string ticket_id = 2;
    optional bool found = 3;
}

message Section {
    optional SectionType type = 1;
    optional PtObject origin = 2;
    optional PtObject destination = 3;

// Si c'est du TC
    optional PtDisplayInfo pt_display_informations = 4;
    optional Uris uris = 5;
    optional VehicleJourney vehicle_journey = 9;
    repeated StopDateTime stop_date_times = 10;

// Si c'est du routier
    optional StreetNetwork street_network = 12;

// Si c'est de l'attente
    optional TransferType transfer_type = 13;

// Dans tous les cas
    repeated GeographicalCoord shape = 24;
    optional int32 duration = 15;

    optional uint64 begin_date_time = 16;
    optional uint64 end_date_time = 17;
    optional addInfoVehicleJourney add_info_vehicle_journey = 18;
    optional int32 length = 19;
    optional string id = 20;
}

message Journey {
    optional int32 duration = 1;
    optional int32 nb_transfers = 2;
    optional uint64 departure_date_time = 3;
    optional uint64 arrival_date_time = 4;
    optional uint64 requested_date_time = 5;
    repeated Section sections = 6;
    optional PtObject origin = 7;
    optional PtObject destination = 8;
    optional string type = 9;
    optional Fare fare = 10;
    repeated string tags = 11;
}

enum ResponseType {
    ITINERARY_FOUND = 1;
    DATE_OUT_OF_BOUNDS = 2;
    NO_ORIGIN_POINT = 3;
    NO_DESTINATION_POINT = 4;
    NO_ORIGIN_NOR_DESTINATION_POINT = 5;
    NO_VIA_POINT = 6;
    NO_SOLUTION = 7;
    CONNECTION_LIMITATION = 8;
    DURATION_LIMITATION = 9;
}

message Planner {
    repeated Journey journeys = 1;
    optional ResponseType response_type = 2;
    optional string before = 3;
    optional string after = 4;
}

message Status{
    required string publication_date = 1;
    required string start_production_date = 2;
    required string end_production_date = 3;

    optional int32 data_version = 4;
    optional string navitia_version = 6;

    repeated string data_sources = 7;

    optional string last_load_at = 8;

    optional bool last_load_status = 9;
    optional bool loaded = 10;

    optional int32 nb_threads = 11;
    optional bool is_connected_to_rabbitmq = 12;
    optional string status = 13;

    optional string last_rt_data_loaded = 14;
}

message PairStopTime {
    required StopDateTime departure = 1;
    required StopDateTime arrival = 2;
}

message ScheduleStopTime {
    optional Properties properties = 2;
    // date time is split because sometimes
    // we want only time and no dates for the schedule
    // Note: to define a null schedule time, time must be equal to it's max value (max uint64 value) 
    optional uint64 time = 3; //time is the number of seconds since midnight
    optional uint64 date = 4; //date is a posix time stamp to midnight
}

message RouteScheduleRow {
    required StopPoint stop_point = 1;
    repeated ScheduleStopTime date_times = 2;
    repeated string stop_times = 3;
}

message addInfoVehicleJourney{
    optional VehicleJourneyType vehicle_journey_type = 1;
    optional bool has_date_time_estimated = 2;
    optional bool stay_in = 3 [default=false];
}

message Header{
    required PtDisplayInfo pt_display_informations = 1;
    required addInfoVehicleJourney add_info_vehicle_journey = 2;
}

message Table {
    repeated RouteScheduleRow rows = 1;
    repeated Header headers = 2;
}

message RouteSchedule {
    required Table table = 1;
    required PtDisplayInfo pt_display_informations = 2;
    optional MultiLineString geojson = 3;
}

message Passage {
    required StopDateTime stop_date_time = 1;
    required StopPoint stop_point = 2;
    optional PtDisplayInfo pt_display_informations = 3;
    optional VehicleJourney vehicle_journey = 4;
}

message StopsSchedule {
    repeated PairStopTime board_items = 1;
}

message BoardItem {
    required string hour =1;
    repeated string minutes = 2;
}

message DepartureBoard {
    required StopPoint stop_point = 1;
    required Route route = 2;
    repeated BoardItem board_items = 3;
}

message Load {
    required bool ok = 1;
}

message Metadatas {
    required string start_production_date = 1;
    required string end_production_date = 2;
    required string shape = 3;
    required string status = 4;
    repeated string contributors = 12;
    optional string timezone = 13;
}

message Pagination {
    required int32 totalResult = 1;
    required int32 startPage = 2;
    required int32 itemsPerPage = 3;
    required int32 itemsOnPage = 4;
    optional string nextPage = 5;
    optional string previousPage = 6;
}

message StopSchedule {
    required Route route = 1;
    required PtDisplayInfo pt_display_informations = 2;
    required StopPoint stop_point = 3;
    repeated ScheduleStopTime date_times = 4;
    optional ResponseStatus response_status = 5;
}


message Error{
    enum error_id{
        bad_filter = 1;
        unknown_api = 2;
        date_out_of_bounds = 3;
        unable_to_parse = 4;
        bad_format = 5;
        no_origin = 6;
        no_destination = 7;
        no_origin_nor_destination = 8;
        no_solution = 9;
        unknown_object = 10;
        service_unavailable = 11;
        invalid_protobuf_request = 12;
        internal_error = 13;
    }
    optional error_id id = 1;
    optional string message = 2;
}

message Disruptions{
    optional Network network = 1;
    repeated Line lines = 2;
    repeated StopArea stop_areas = 3;   
}

message Response{
    optional int32 status_code = 1;
    optional Error error = 2;
    optional string info = 3;

    optional Status status = 4;
    optional int32 publication_date = 5;
    //PtObjects
    repeated string ignored_words = 11;
    repeated string bad_words = 12;
    repeated PtObject places = 13;
    repeated PtObject places_nearby = 14;

    //Ptref
    repeated ValidityPattern validity_patterns = 15;
    repeated Line lines = 16;
    repeated JourneyPattern journey_patterns = 17;
    repeated VehicleJourney vehicle_journeys = 18;
    repeated StopPoint stop_points = 19;
    repeated StopArea stop_areas = 20;
    repeated Network networks = 21;
    repeated PhysicalMode physical_modes = 22;
    repeated CommercialMode commercial_modes = 23;
    repeated Connection connections = 24;
    repeated JourneyPatternPoint journey_pattern_points = 25;
    repeated Company companies = 26;
    repeated Route routes = 27;
    repeated Poi pois = 28;
    repeated PoiType poi_types = 29;
    repeated Calendar calendars = 55;

    //Journeys
    repeated Journey journeys = 30;
    optional ResponseType response_type = 31;
    optional string prev = 32;
    optional string next = 33;

    //TimeTables
    optional StopsSchedule stops_schedule = 34;
    repeated RouteSchedule route_schedules = 35;
    repeated DepartureBoard departure_boards = 36;
    repeated Passage next_departures = 37;
    repeated Passage next_arrivals = 38;
    repeated StopSchedule stop_schedules = 39;

    optional Load load = 46;
    optional Metadatas metadatas = 48;
    optional Pagination pagination = 49;
    
    //Disruptions
    repeated Disruptions disruptions = 60;

    //Fare
    repeated Ticket tickets = 51;

    //Ptobject
    repeated PtObject pt_objects = 52;
}
